"졸림 알림 서비스" 에서 분석결과에 따른 시나리오 기준 상태 변경 서비스를 개발하려 합니다.
여기에 필요한 상태 변경 룰이 필요합니다.
상태 변경 플로우는 첨부된 이미지와 같습니다.

1. 시나리오 설명
   - 전체 졸음 위험 상태 단계는 "정상" -> "의심경고" -> "집중모니터링" -> "지속졸음" -> "경고강화 L1" ->  "경고강화 L2" ->  "경고강화 L3" -> "페일세이프" 입니다.
   - "의심경고" 단계는 1초 후에 바로 "집중모니터링" 에 넘어 갑니다.
   - "집중모니터링" 은 5초 동안 지속하여 졸음상태가 유지된가도 판단되면 "지속졸음" 상태로  넘어갑니다.
   - "지속졸음" 은 1초 유지후 바로  "경고강화 L1" 단계로 넘어 갑니다.
   - "경고강화 L1" 에서 부터 "페일 세이프" 까지 가는 총 4단계는 각 단계별 5초동안 졸음 상태가 유지된다고 판단 되면 차례로 넘어 갑니다.
   - "집중모니터링" -> "개선" 으로 넘어가는 경우는 "집중모니터링" 시 "졸음상태"가 개선 될 경우입니다.
   -  "경고강화 L1" ,  "경고강화 L2", "경고강화 L3",  "페일세이프" 의 각 단계에서 "휴식모드" 로 넘어가는 경우는 "졸음상태"가 개선되는 경우 입니다.
   - "휴식모드" 에서 "개선" 으로 넘어가는 경우는 5초 동안 "졸음상태" 가 아닌 겅우 입니다.
   - "휴식모드" 에서 "졸음상태" 로 돌아가 2초 유지되면 다시 "경고강화 L1" 상태로 전환 됩니다.
   - "개선" 에서 "정상" 으로 넘거가는 경우는 5초 동안 "졸음상태" 가 아닌 겅우 입니다.
   - "개선" 에서 "졸음상태" 로 돌아가 2초 유지되면 다시 "의심경고" 상태로 전환 됩니다.

2. 졸음 상태 판단
   - kafka 로 부터 입력된 "drowny_level" 값을 통해 판단합니다
   - "drowny_level" 은 -1, 0, 1, 2, 3 단계로 나눕니다
   - 각 수치별 의미는  -1 -> 모름, 0 -> 정상, 1-> 졸림상태 약,  2 -> 졸림상태 중, 3 -> 졸림상태 강
   - -1 과 0 은 모두 정상으로 한다.
   - "정상" 에서 졸음상태 판단 기준은  "drowny_level" 1, 2, 3 단계 입니다.
   - "집중모니터링" 에서 졸음상태 판단 기준은 "drowny_level" 2, 3 단계 입니다.
   - 경고강화 L1, L2, L3 에서 졸음상태 판단 기준은  "drowny_level" 2, 3 단계 입니다.

3. 졸움 상태 알고리즘 개발
   - 1, 시나리오 와 2. 졸은상태 판단 을 참고하여 상태 변경 알고리즘을 개발 해주세요.

4. 비즈니스 로직
   - kafka 로 부터 seesion 정보 기준 서비스 시작 , 종료 메시지를 가져옴
       i) kafka topic 은 "zolgima-control" 입니다.
       ii) 항상 마지막 (최근) 이벤트를 가져옵니다.
       iii) key 값을 읽어 시작 , 종료를 확인합니다. 
           start-stream --> 스트림 분석 시작
           stop-stream --> 스트림 분석 종료
       iv) value  값을 세션 정보를 확인합니다.
            seesion-id 는 value (json type) 안의 "session-id" 값입니다.
   - 분석 세젼 시작 :  seesion-id 기준으로 start-stream 시 해당 sesstion-id 기준 lstm 분석 데이타를 kafka message 를 읽어 옵니다.
       i) kafka topic 은 "{session-id}-LSTM" 입니다.
       ii) 해당 topic 기준으로 consumer 를 열고 message 를 읽어 옵니다.
       iii) message 값은 다음과 같습니다. (json type)
           frame --> 분석 윈도우의 마지막 frame index
           drowny-level --> 졸음 지표.
       iv) 위 message 의 drowny-level 을 각 session 별 졸음 상태 알고리즘(함수)의 입력변수로 사용합니다.
   - 시나리오상 상태 적용
       i) 알고리즘상 시나리오사 상태 ( "정상" , "의심경고" , "집중모니터링" , "지속졸음" , "경고강화 L1" ,  "경고강화 L2" ,  "경고강화 L3" , "페일세이프", "개선", "휴식모드")  변경이 있으면 DB 의  "driver_state_history" 에 마지막 상태를 추가 합니다.
           히스토리를 위해 기존 상태 row 를 변경하는 것이아니라 새로운 row를 추가합니다.
       ii) 상태 변경에서 필요시 LLM_Service 쪽에 상태 변경 Rest API 호출을 하여 프론트엔드에 반영한다.
    - 분석 세션 종료 : stop-stream  메시지 수신시 해당 세션에 대한 분석 종료 
    
    - 멀티 세션 관리
       i) 동시에 여러 세션이 시작 되어 분석 될 수 있도록 관리/운영 코드(프레임춰크) 개발
       ii) 각 세션별 consumer 관리.
       
5. 저장소 정보 
   - kafka :
         {"bootstrap_servers":"kafka.dongango.com:9094"}
   - DB (MySql) 
       i) dns : mysql.dongango.com
       ii) port : 3306 (기본 포트)
       iii) id : class5
       iv) passwd : zmffotm5
       v) DB Schema : ai3class5
   - table 정봉 (driver_state_history)
       i) 테이블 create 문
               CREATE TABLE `driver_state_history` (
                  `id` bigint NOT NULL AUTO_INCREMENT,
                  `user_id` bigint NOT NULL,
                  `session_token` varchar(255) NOT NULL,
                  `level_code` int NOT NULL,
                  `stage` varchar(20) NOT NULL,
                  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
                  PRIMARY KEY (`id`),
                  KEY `idx_sess_created` (`session_token`,`created_at`),
                  KEY `idx_user_created` (`user_id`,`created_at`)
                ) ENGINE=InnoDB AUTO_INCREMENT=152 DEFAULT CHARSET=utf8mb3;
  
  6. 개발 환경
     - python 3.11 + pyenv 가상환경
     - 위의 환경하에 구축 필요한 라이블러리는 알아서 제안 해주세요
     
위 1 번에서 6번까지의 조건을 만족하틑 코드글 개발 해주세요.
MSA 로 운영된 컨테이너로 동작할 수 있어야 합니다.
